// file: EvaluateInfix.java// author: Bob Muller based on Sedgewick & Wayne's implementation of//         Dijkstra's Two-stack Algorithm.//// This program implements a simple calculator for arithmetic expressions// that may or may not include explicit parenthesis. It uses the algs4// library function StdIn.readString.//// NOTE: the input string must be enclosed in parentheses and each item// must have spaces. Eg. "( 2 + 3 * 4 )" is OK but neither "2 + 3 * 4"// nor "(2+3*4)" are OK.//// This code demonstrates the use of generic stacks.//import edu.princeton.cs.algs4.StdIn;public class EvaluateInfix {  private static double precedence(String operator) {    if (operator.equals("+")) return 1;    else if (operator.equals("-")) return 1;    else if (operator.equals("*")) return 2;    else if (operator.equals("/")) return 2;    else if (operator.equals("^")) return 3;    else return 0;  }  private static double calculation(double numOne, double numTwo, String operator) {    if (operator.equals("+")) return (numOne + numTwo);    else if (operator.equals("-")) return (numOne - numTwo);    else if (operator.equals("*")) return (numOne * numTwo);    else if (operator.equals("/")) return (numOne / numTwo);    else return Math.pow(numOne, numTwo);  }  public static void main(String[] args) {    Stack<String> opStack = new ResizingArrayStack<String>();    Stack<Double> valStack = new ResizingArrayStack<Double>();    System.out.format("Enter an expression followed by ctrl-d:\n");    while (!StdIn.isEmpty()) {      String token = StdIn.readString();      if (token.equals("(")) opStack.push(token);      else if (token.equals(")")) {        while (!opStack.peek().equals("(")) {          String operator = opStack.pop();          double numOne = valStack.pop();          double numTwo = valStack.pop();          double answer = calculation(numTwo, numOne, operator);          valStack.push(answer);        }        opStack.pop();      }      else if (token.equals("+") || token.equals("-") || token.equals("*") || token.equals("/")              || token.equals("^")) {        while (!opStack.isEmpty() && (precedence(opStack.peek()) >= precedence(token))) {          String operator = opStack.pop();          double numOne = valStack.pop();          double numTwo = valStack.pop();          double answer = calculation(numTwo, numOne, operator);          valStack.push(answer);        }        opStack.push(token);      }      else valStack.push(Double.parseDouble(token));    }    System.out.format("%s\n", valStack.pop());  }}